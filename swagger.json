{
  "swagger": "2.0",
  "info": {
    "description": "Politico enables citizens give their mandate to politicians running for different government offices while building trust in the process through transparency. This is a platform which both the politicians and citizens can use.",
    "version": "1.0.0",
    "title": "Politico",
    "contact": {
      "email": "martins.aloba@gmail.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "host": "mart-politico-app.herokuapp.com",
  "basePath": "/api/v1",
  "tags": [
    {
      "name": "party",
      "description": "Route for political party"
    },
    {
      "name": "office",
      "description": "Route for government office"
    },
    {
      "name": "vote",
      "description": "Route to cast vote"
    },
    {
      "name": "user",
      "description": "Route for users"
    }
  ],
  "schemes": [
    "https",
    "http"
  ],
  "paths": {
    "/party": {
      "post": {
        "tags": [
          "party"
        ],
        "summary": "Add a new political party to the database",
        "description": "",
        "operationId": "addParty",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Party object that needs to be added to the database",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Party"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "political Party was successfully created!"
          },
          "400": {
            "description": "Party cannot be created!"
          },
          "403": {
            "description": "Token is not provided"
          }
        }
      },
      "get": {
        "tags": [
          "party"
        ],
        "summary": "Find all parties",
        "description": "Returns all party",
        "operationId": "getParty",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "partyId",
            "in": "path",
            "description": "party to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Party record retrieved successfully!",
            "schema": {
              "$ref": "#/definitions/Party"
            }
          },
          "404": {
            "description": "Party record does not exist!"
          },
          "422": {
            "description": "Party list was fecthed"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "delete": {
        "tags": [
          "party"
        ],
        "summary": "Deletes a party",
        "description": "",
        "operationId": "deletePary",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "partyId",
            "in": "path",
            "description": "Party id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Political Party record cannot be found!"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/party/{partyId}": {
      "get": {
        "tags": [
          "party"
        ],
        "summary": "Find party by ID",
        "description": "Returns a single party",
        "operationId": "getPartyById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "partyId",
            "in": "path",
            "description": "ID of party to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Party record retrieved successfully!",
            "schema": {
              "$ref": "#/definitions/Party"
            }
          },
          "404": {
            "description": "Party record does not exist!"
          },
          "422": {
            "description": "Party list was fecthed"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/party/{partyId}/name": {
      "patch": {
        "tags": [
          "office"
        ],
        "summary": "Update party name",
        "description": "Returns party by id",
        "operationId": "getOfficeId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "partyId",
            "in": "path",
            "description": "ID of office",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Party name was successfully changed to"
          },
          "404": {
            "description": "Party was was not updated!"
          }
        }
      }
    },
    "/office/": {
      "get": {
        "tags": [
          "office"
        ],
        "summary": "Returns all offices",
        "description": "return list of all offices",
        "operationId": "getOffice",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Government offices successfully retrieved",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "post": {
        "tags": [
          "office"
        ],
        "summary": "Create new office",
        "description": "",
        "operationId": "createOffice",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "officeId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Office successfully created"
          }
        }
      }
    },
    "/office/{officeId}/register": {
      "post": {
        "tags": [
          "office"
        ],
        "summary": "Find office ID",
        "description": "Returns office by id",
        "operationId": "OfficeId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "officeId",
            "in": "path",
            "description": "ID of office",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "You have successfully registered",
            "schema": {
              "$ref": "#/definitions/Office"
            }
          },
          "400": {
            "description": "Your form cannot be submitted"
          }
        }
      }
    },
    "/office/{officeId}": {
      "get": {
        "tags": [
          "office"
        ],
        "summary": "Find office ID",
        "description": "Returns office by id",
        "operationId": "getOfficeById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "officeId",
            "in": "path",
            "description": "ID of office",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Government office successfully retrieved",
            "schema": {
              "$ref": "#/definitions/Office"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Government office does not exist"
          }
        }
      }
    },
    "/office/{officeId}/result": {
      "get": {
        "tags": [
          "office"
        ],
        "summary": "Find office ID",
        "description": "Returns office by id",
        "operationId": "getOfficeResult",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "officeId",
            "in": "path",
            "description": "ID of office",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Government office successfully retrieved",
            "schema": {
              "$ref": "#/definitions/Office"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Government office does not exist"
          }
        }
      }
    },
    "/votes/": {
      "post": {
        "tags": [
          "vote"
        ],
        "summary": "Vote candidate",
        "description": "This create vote for government office",
        "operationId": "createUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Create vote for candidate",
            "required": true,
            "schema": {
              "$ref": "#/definitions/vote"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/auth/signup": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create user",
        "description": "This can only be done by the logged in user.",
        "operationId": "NewUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "You have successfully registered"
          }
        }
      }
    },
    "/auth/login": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Logs user into the system",
        "description": "",
        "operationId": "loginUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "The eamil for user",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for login",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "You have successfully login",
            "schema": {
              "type": "string"
            },
            "headers": {
              "X-Rate-Limit": {
                "type": "integer",
                "format": "int32",
                "description": "calls per hour allowed by the user"
              },
              "X-Expires-After": {
                "type": "string",
                "format": "date-time",
                "description": "date in UTC when token expires"
              }
            }
          },
          "400": {
            "description": "Invalid email/password supplied"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "firstname": {
          "type": "string"
        },
        "lastname": {
          "type": "string"
        },
        "othername": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "phonenumber": {
          "type": "string"
        },
        "registered": {
          "format": "date-type"
        },
        "passporturl": {
          "type": "string"
        }
      }
    },
    "Office": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "createdon": {
          "type": "string",
          "format": "date-type"
        },
        "type": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "vote": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "createdon": {
          "type": "string",
          "format": "date-type"
        },
        "office": {
          "type": "integer"
        },
        "candidate": {
          "type": "integer"
        },
        "voter": {
          "type": "integer"
        }
      }
    },
    "Party": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "example": 1
        },
        "name": {
          "type": "string",
          "example": "doggie"
        },
        "hqAddress": {
          "type": "string"
        },
        "logoUrl": {
          "type": "string"
        }
      }
    }
  }
}